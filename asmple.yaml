import pulumi
import subprocess
from pulumi_kubernetes.core.v1 import Secret

# Define the Kubernetes Secret data
secret_data = {
    "username": "admin",
    "password": "mysecretpassword"
}

# Create the Kubernetes Secret
k8s_secret = Secret(
    "my-secret",
    metadata={
        "name": "my-secret",
    },
    string_data=secret_data
)

# Export the Kubernetes Secret
pulumi.export("k8s_secret", k8s_secret)

# Convert the Kubernetes Secret to SealedSecret
def convert_to_sealed_secret(secret_yaml):
    # Define the command to execute kubeseal
    kubeseal_command = ["kubeseal", "--format=yaml"]

    # Execute kubeseal and capture the output
    kubeseal_output = subprocess.check_output(kubeseal_command, input=secret_yaml.encode("utf-8")).decode("utf-8")

    return kubeseal_output

# Convert the Kubernetes Secret to SealedSecret
sealed_secret_yaml = convert_to_sealed_secret(k8s_secret.metadata.apply(lambda metadata: metadata.apply(lambda meta: meta.name)).apply(lambda name: pulumi.runtime.getConfig().require("kubeconfig")))

# Deploy the SealedSecret using the Kubernetes provider
sealed_secret = pulumi.Kubernetes.yaml.ConfigFile(
    "sealed-secret",
    file=sealed_secret_yaml,
    transformations=[
        lambda _: _.apply(lambda obj: pulumi.Output.from_input(obj).apply(lambda sealed_secret: sealed_secret))
    ]
)

# Export the SealedSecret
pulumi.export("sealed_secret", sealed_secret)


=====================

import pulumi
import subprocess
from pulumi_kubernetes.yaml import ConfigFile

# Define the path to the Kubernetes Secret YAML file
secret_yaml_path = "path/to/secret.yaml"  # Update with the correct file path

# Read the Kubernetes Secret YAML file
with open(secret_yaml_path, "r") as f:
    secret_yaml = f.read()

# Convert the Kubernetes Secret to SealedSecret
def convert_to_sealed_secret(secret_yaml):
    # Define the command to execute kubeseal
    kubeseal_command = ["kubeseal", "--format=yaml"]

    # Execute kubeseal and capture the output
    kubeseal_output = subprocess.check_output(kubeseal_command, input=secret_yaml.encode("utf-8")).decode("utf-8")

    return kubeseal_output

# Convert the Kubernetes Secret to SealedSecret
sealed_secret_yaml = convert_to_sealed_secret(secret_yaml)

# Deploy the SealedSecret using the Kubernetes provider
sealed_secret = ConfigFile(
    "sealed-secret",
    file=sealed_secret_yaml,
    transformations=[
        lambda _: _.apply(lambda obj: pulumi.Output.from_input(obj).apply(lambda sealed_secret: sealed_secret))
    ]
)

# Export the SealedSecret
pulumi.export("sealed_secret", sealed_secret)

import pulumi
import pulumi_kubernetes as kubernetes
import pulumi_kubernetes.helm.v3 as helm

# Define the path to the SealedSecret YAML file
sealed_secret_yaml_path = "path/to/sealedsecret.yaml"  # Update with the correct file path

# Read the SealedSecret YAML file
with open(sealed_secret_yaml_path, "r") as f:
    sealed_secret_yaml = f.read()

# Create the Kubernetes provider
k8s_provider = kubernetes.Provider("k8s-provider")

# Create the Helm chart resource
chart = helm.Chart("my-chart",
    chart="my-chart",  # Update with the correct Helm chart name
    namespace="my-namespace",  # Update with the desired namespace
    values={
        "sealedSecrets.customResourceDefinitions.create": "false",
        "sealedSecrets.sealedSecretsController.enabled": "false",
        "sealedSecrets.sealedSecretsController.resources": sealed_secret_yaml,
    },
    kubernetes=k8s_provider,
)

# Export any relevant outputs or resources
pulumi.export("chart", chart)

import pulumi
import pulumi_kubernetes as kubernetes
import pulumi_kubernetes.apiextensions.v1 as apiextensions

# Define the path to the SealedSecret YAML file
sealed_secret_yaml_path = "path/to/sealedsecret.yaml"  # Update with the correct file path

# Read the SealedSecret YAML file
with open(sealed_secret_yaml_path, "r") as f:
    sealed_secret_yaml = f.read()

# Create the Kubernetes provider
k8s_provider = kubernetes.Provider("k8s-provider")

# Create the CustomResourceDefinition for SealedSecret
custom_resource_definition = apiextensions.CustomResourceDefinition("sealed-secret-crd",
    metadata={
        "name": "sealedsecrets.bitnami.com",
    },
    spec={
        "group": "bitnami.com",
        "version": "v1alpha1",
        "scope": "Namespaced",
        "names": {
            "plural": "sealedsecrets",
            "singular": "sealedsecret",
            "kind": "SealedSecret",
            "shortNames": ["ss"],
        },
    },
    opts=pulumi.ResourceOptions(provider=k8s_provider),
)

# Create the SealedSecret resource
sealed_secret = kubernetes.yaml.ConfigFile("sealed-secret",
    file=sealed_secret_yaml,
    opts=pulumi.ResourceOptions(provider=k8s_provider),
)

# Export any relevant outputs or resources
pulumi.export("sealed_secret", sealed_secret)

import pulumi
from pulumi_kubernetes import Provider, core
import pulumi_aws as aws
from pulumi import Config

# Create a Kubernetes Provider to interact with the cluster
k8s_provider = Provider("k8s-provider", kubeconfig="")
config = Config()

# Create a Kubernetes Namespace
namespace = core.v1.Namespace(
    "my-namespace", metadata={"name": "sealed-secrets-example"}, opts=pulumi.ResourceOptions(provider=k8s_provider)
)

# Create a Secret
secret_data = {"foo": config.get_secret("my-secret-value")}
kube_secret = core.v1.Secret(
    "my-secret",
    metadata={"namespace": namespace.metadata["name"]},
    data=secret_data,
    opts=pulumi.ResourceOptions(provider=k8s_provider),
)

# Get KMS Key and SealedSecret public key using aws.kms.getSecret
secret_key = aws.kms.get_secret(
    secrets=[
        {
            "name": "sealed-secrets-key",
            "payload": config.get_secret("sealed-secrets-key"),
        },
    ],
)

# Create SealedSecret
sealed_secret = pulumi.CustomResource(
    "my-sealed-secret",
    api_version="bitnami.com/v1alpha1",
    kind="SealedSecret",
    metadata={"namespace": namespace.metadata["name"]},
    spec={
        "template": {
            "metadata": {
                "namespace": namespace.metadata["name"],
            },
        },
        "encryptedData": secret_data,
        "publicKey": {
            "name": secret_key.secrets[0]["name"],
            "key": secret_key.secrets[0]["payload"],
        },
    },
    opts=pulumi.ResourceOptions(provider=k8s_provider),
)

# Export the Namespace name
pulumi.export("namespace", namespace.metadata["name"])

